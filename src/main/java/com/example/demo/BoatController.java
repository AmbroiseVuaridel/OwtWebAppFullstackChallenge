package com.example.demo;


import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController	// This means that this class is a Controller
@RequestMapping(path="/boat") // This means URL's start with /demo (after Application path)
@CrossOrigin(origins="*")
public class BoatController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private BoatRepository boatRepository;


	@PostMapping(path="/upsert") // Map ONLY POST Requests
	@ResponseBody 
	public Boat createBoat (@Valid @RequestBody Boat boat) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		boatRepository.save(boat);
		return boat;
	}

	@GetMapping(path="/all")
	@ResponseBody
	public Iterable<Boat> getAllBoats() {
		// This returns a JSON or XML with the boats
		return boatRepository.findAll();
	}

	@GetMapping(path="/delete/{id}")
	@ResponseBody
	public Iterable<Boat> deleteBoat(@PathVariable("id") int id){
		// This returns a JSON or XML with the boats
		boatRepository.deleteById(id);
		return boatRepository.findAll();
	}


	@GetMapping(path="/{id}")
	@ResponseBody
	public Optional<Boat> getBoat(@PathVariable("id") int id) {
		// This returns a JSON or XML with the boats
		return boatRepository.findById(id);
	}
}
